use org.openflexo.foundation.fml.rt.FMLRTVirtualModelInstanceModelSlot;

/**
 * 
 * @version 0.1
 */
@VirtualModel(uri="http://ensta-bretagne.fr/oneway/Oneway.fml/DocumentAnnotations.fml")
public class DocumentAnnotations {

  public DocumentLibrary documentLibrary;
  public Unclassified unclassified;
  @GetSetProperty(value="elementReferences", access=get)  
  public List<ElementReference> getElementReferences {  
    return this.SelectFlexoConceptInstance(type=ElementReference);  
  }

  @CreationScheme  
  DocumentAnnotations:create() {  
    unclassified = Unclassified.create();    
    documentLibrary = DocumentLibrary.create();  
  }  

  @ActionScheme  
  ElementReference getElementReference(Element element) {  
    List<ElementReference> list = this.SelectFlexoConceptInstance(type=ElementReference,where=where=(selected.element = parameters.element));    
    if (list.size > 0) {    
      return list.get(0);    
    } else {    
      return ElementReference.createNewEmptyElementReference(parameters.element);    
    }  
  }  

  @ActionScheme  
  RequirementReference getRequirementReference(Requirement requirement) {  
    Element containerElement = parameters.requirement.container;    
    ElementReference elementReference = this.getElementReference(containerElement);    
    List<RequirementReference> list = this.SelectFlexoConceptInstance(type=RequirementReference,where=where=(selected.requirement = parameters.requirement));    
    if (list.size > 0) {    
      return list.get(0);    
    } else {    
      return RequirementReference.createEmpty(parameters.requirement);    
    }  
  }  

  @ActionScheme  
  ElementReference identifyElement(String elementName, String elementDescription, Element parentElement, Reference reference) {  
    Element newElement = parameters.parentElement.createChildrenElement(parameters.elementName,parameters.elementDescription);    
    log ("Called IdentifyElement with " + parameters.reference)    
    ElementReference newElementReference = this.getElementReference(newElement);    
    newElementReference.references.add(parameters.reference)    
    return newElementReference;  
  }  

  @ActionScheme  
  ElementReference annotateElement(Element element, Reference reference) {  
    ElementReference elementReference = this.getElementReference(parameters.element);    
    elementReference.references.add(parameters.reference)    
    return elementReference;  
  }  

  @ActionScheme  
  RequirementReference identifyRequirement(String requirementName, String requirementDescription, Element parentElement, Reference reference) {  
    ElementReference elementReference = this.getElementReference(parameters.parentElement);    
    Requirement newRequirement = parameters.parentElement.createRequirement(parameters.requirementName,parameters.requirementDescription);    
    RequirementReference newRequirementReference = this.getRequirementReference(newRequirement);    
    newRequirementReference.references.add(parameters.reference)    
    return newRequirementReference;  
  }  

  @ActionScheme  
  Reference addUnclassifiedReference(Reference reference) {  
    unclassified.addToUnclassifiedReferences(parameters.reference)    
    return parameters.reference;  
  }  

  @ActionScheme  
  RequirementReference makeRequirementReference(Requirement requirement) {  
    ElementReference elementReference = this.getElementReference(parameters.requirement.container);    
    if (elementReference = null) {    
      elementReference = ElementReference.createNewEmptyElementReference(parameters.requirement.container);    
    }    
    return RequirementReference.createEmpty(parameters.requirement);  
  }  

  @DeletionScheme  
  Void delete() {  
  
  }  


  @FlexoConcept  
  public class ElementReference extends NamedReference  {  
  
    public Element element;  
    @GetSetProperty(value="requirementReferences", access=get)    
    public List<RequirementReference> getRequirementReferences {    
      return container.SelectFlexoConceptInstance(type=RequirementReference);    
    }  
  
    @DeletionScheme    
    Void delete() {    
      
    }    
  
    @CreationScheme    
    ElementReference:createNewEmptyElementReference(Element anElement) {    
      element = parameters.anElement;      
      log "*** Fire getElementReference(Element)"      
      container.firePropertyChange getElementReference(Element)    
    }    
  
  
    @FlexoConcept    
    public class RequirementReference extends NamedReference  {    
      
      public Requirement requirement;    
      
      @DeletionScheme      
      Void delete() {      
          
      }      
      
      @CreationScheme      
      RequirementReference:createEmpty(Requirement aRequirement) {      
        requirement = parameters.aRequirement;      
      }      
      
    }    
  
  }  

  /**  
   * Represent a named reference, with a name, a description and some keywords.  
  Points to a list of document references in the whole library.  
   *   
   */  
  @FlexoConcept  
  public class NamedReference {  
  
    public String name;  
    public String description;  
    public List references;  
    public String keywords;  
  
    @CreationScheme    
    NamedReference:create(String aName, String aDescription) {    
      name = parameters.aName;      
      description = parameters.aDescription;    
    }    
  
    @DeletionScheme    
    Void delete() {    
      
    }    
  
    @ActionScheme    
    Reference addReference(Reference aReference) {    
      if (parameters.aReference != null) {      
        references.add(parameters.aReference)        
        this.firePropertyChange references      
      }      
      return parameters.aReference;    
    }    
  
    @ActionScheme    
    Void moveReference(Reference aReference, NamedReference namedReference) {    
      log ((("Moving reference " + parameters.aReference) + " to ") + parameters.namedReference)      
      references.remove(parameters.aReference);      
      parameters.namedReference.references.add(parameters.aReference)      
      this.firePropertyChange references      
      parameters.namedReference.firePropertyChange references    
    }    
  
  }  

  @FlexoConcept  
  public class RequirementReference extends NamedReference  {  
  
    public Requirement requirement;  
  
    @DeletionScheme    
    Void delete() {    
      
    }    
  
    @CreationScheme    
    RequirementReference:createEmpty(Requirement aRequirement) {    
      requirement = parameters.aRequirement;    
    }    
  
  }  

  @FlexoConcept  
  public class Unclassified {  
  
    public List unclassifiedReferences;  
  
    @CreationScheme    
    Unclassified:create() {    
      
    }    
  
    @DeletionScheme    
    Void delete() {    
      
    }    
  
    @ActionScheme    
    Void addToUnclassifiedReferences(Reference reference) {    
      unclassifiedReferences.add(parameters.reference)      
      this.firePropertyChange unclassifiedReferences    
    }    
  
    @ActionScheme    
    Void moveReference(Reference aReference, NamedReference namedReference) {    
      log ((("Moving reference " + parameters.aReference) + " to ") + parameters.namedReference)      
      unclassifiedReferences.remove(parameters.aReference);      
      parameters.namedReference.references.add(parameters.aReference)      
      this.firePropertyChange unclassifiedReferences      
      parameters.namedReference.firePropertyChange references    
    }    
  
  }  

}
